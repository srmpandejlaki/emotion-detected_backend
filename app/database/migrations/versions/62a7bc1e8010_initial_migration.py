"""initial migration

Revision ID: 62a7bc1e8010
Revises: 
Create Date: 2025-05-03 06:33:12.723994

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '62a7bc1e8010'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('validation_data')
    op.drop_index('ix_model_id_model', table_name='model')
    op.drop_table('model')
    op.drop_table('confusion_matrix')
    op.drop_index('ix_validation_result_id_validation', table_name='validation_result')
    op.drop_table('validation_result')
    op.drop_index('ix_data_collection_id_data', table_name='data_collection')
    op.drop_table('data_collection')
    op.drop_index('ix_process_result_id_process', table_name='process_result')
    op.drop_table('process_result')
    op.drop_table('model_data')
    op.drop_index('ix_label_emotion_id_label', table_name='label_emotion')
    op.drop_table('label_emotion')
    op.drop_table('class_metrics')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('class_metrics',
    sa.Column('metrics_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('precision', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('recall', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['label_id'], ['label_emotion.id_label'], name='class_metrics_label_id_fkey'),
    sa.PrimaryKeyConstraint('metrics_id', 'label_id', name='uix_class_metrics')
    )
    op.create_table('label_emotion',
    sa.Column('id_label', sa.INTEGER(), server_default=sa.text("nextval('label_emotion_id_label_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nama_label', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id_label', name='label_emotion_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_label_emotion_id_label', 'label_emotion', ['id_label'], unique=False)
    op.create_table('model_data',
    sa.Column('id_model', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id_process', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id_model'], ['model.id_model'], name='model_data_id_model_fkey'),
    sa.ForeignKeyConstraint(['id_process'], ['process_result.id_process'], name='model_data_id_process_fkey'),
    sa.PrimaryKeyConstraint('id_model', 'id_process', name='model_data_pkey')
    )
    op.create_table('process_result',
    sa.Column('id_process', sa.INTEGER(), server_default=sa.text("nextval('process_result_id_process_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('id_data', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('text_preprocessing', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_training_data', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('automatic_label', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['automatic_label'], ['label_emotion.id_label'], name='process_result_automatic_label_fkey'),
    sa.ForeignKeyConstraint(['id_data'], ['data_collection.id_data'], name='process_result_id_data_fkey'),
    sa.PrimaryKeyConstraint('id_process', name='process_result_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_process_result_id_process', 'process_result', ['id_process'], unique=False)
    op.create_table('data_collection',
    sa.Column('id_data', sa.INTEGER(), server_default=sa.text("nextval('data_collection_id_data_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('text_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['label_id'], ['label_emotion.id_label'], name='data_collection_label_id_fkey'),
    sa.PrimaryKeyConstraint('id_data', name='data_collection_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_data_collection_id_data', 'data_collection', ['id_data'], unique=False)
    op.create_table('validation_result',
    sa.Column('id_validation', sa.INTEGER(), server_default=sa.text("nextval('validation_result_id_validation_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('model_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('matrix_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metrics_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['model.id_model'], name='validation_result_model_id_fkey'),
    sa.PrimaryKeyConstraint('id_validation', name='validation_result_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_validation_result_id_validation', 'validation_result', ['id_validation'], unique=False)
    op.create_table('confusion_matrix',
    sa.Column('matrix_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('predicted_label_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['label_id'], ['label_emotion.id_label'], name='confusion_matrix_label_id_fkey'),
    sa.ForeignKeyConstraint(['predicted_label_id'], ['label_emotion.id_label'], name='confusion_matrix_predicted_label_id_fkey'),
    sa.PrimaryKeyConstraint('matrix_id', 'label_id', 'predicted_label_id', name='uix_confusion_matrix')
    )
    op.create_table('model',
    sa.Column('id_model', sa.INTEGER(), server_default=sa.text("nextval('model_id_model_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('ratio_data', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('matrix_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metrics_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_model', name='model_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_model_id_model', 'model', ['id_model'], unique=False)
    op.create_table('validation_data',
    sa.Column('id_validation', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id_process', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_process'], ['process_result.id_process'], name='validation_data_id_process_fkey'),
    sa.ForeignKeyConstraint(['id_validation'], ['validation_result.id_validation'], name='validation_data_id_validation_fkey'),
    sa.PrimaryKeyConstraint('id_validation', 'id_process', name='validation_data_pkey')
    )
    # ### end Alembic commands ###
